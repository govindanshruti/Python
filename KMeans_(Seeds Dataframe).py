# -*- coding: utf-8 -*-
"""ML assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dubhuE8wC97WBi_JSoy9IoX8W03P3Mbx
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

seed_df=pd.read_csv('/content/sample_data/seeds.csv')
seed_df

"""Checking for Null Values"""

seed_df.isnull().any()

seed_df.columns=['Area','Perimeter','Compactness','LengthOfKernel','WidthOfKernel',
              'AsymmetryCoefficient','LengthOfKernelGroove','SeedType']

seed_df.head()

seed_df.info()

scaler=MinMaxScaler()
norm_seeds=seed_df.copy()

norm_seeds=seed_df.iloc[:,norm_seeds.columns!='SeedType']
inplace=True

norm_seeds

def minmaxscaler(x):
  for columnName, columnData in x.iteritems():
    x[columnName]=scaler.fit_transform(np.array(columnData).reshape(-1,1))

minmaxscaler(norm_seeds)

norm_seeds

"""Elbow plot to find k"""

k=list(range(2,11))
sum_of_squared_distances = []

for i in k:
  kmeans=KMeans(n_clusters=i)
  kmeans.fit(norm_seeds)
  sum_of_squared_distances.append(kmeans.inertia_)

plt.figure(figsize=(10,5))
plt.plot(k, sum_of_squared_distances, 'go--')
plt.xlabel('Number of Clusters')
plt.ylabel('Within Cluster Sum of squares')
plt.title('Elbow Curve to find optimum K')

"""Now building kmeans model with k=3 """

#Instantiating
kmeans3=KMeans(n_clusters=3)

#Training the model
kmeans3.fit(norm_seeds)

#predicting
y_pred=kmeans3.fit_predict(norm_seeds)
print(y_pred)

#Storing the y_pred values in a new column
norm_seeds['Cluster']=y_pred+1

"""Storing the centroids to a dataframe """

centroids=kmeans3.cluster_centers_
centroids=pd.DataFrame(centroids, columns=['Area','Perimeter','Compactness','LengthOfKernel','WidthOfKernel',
              'AsymmetryCoefficient','LengthOfKernelGroove'])
centroids.index=np.arange(1,len(centroids)+1) #Start the index from 1
centroids

varieties = {1: 'Kama', 2: 'Rosa', 3: 'Canadian'}
norm_seeds['Cluster'] = norm_seeds['Cluster'].replace(varieties)
norm_seeds

plt.figure(figsize=(12,6))
sns.set_palette("pastel")
sns.scatterplot(x=norm_seeds['LengthOfKernel'], y=norm_seeds['WidthOfKernel'], hue=norm_seeds['Cluster'], palette='bright')
plt.scatter(kmeans3.cluster_centers_[:, 0], kmeans3.cluster_centers_[:, 1],  
            s = 200, c = 'red', label = 'Centroids',marker = '*')   
plt.legend(title="Seed Clusters")

norm_seeds["Cluster"].value_counts()

